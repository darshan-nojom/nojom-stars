package com.nojom.api;import static com.nojom.Task24Application.BASE_URL_GIG;import static com.nojom.Task24Application.LIVE_URL;import androidx.lifecycle.MutableLiveData;import com.chuckerteam.chucker.api.ChuckerInterceptor;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.nojom.BuildConfig;import com.nojom.Task24Application;import java.util.concurrent.TimeUnit;import okhttp3.OkHttpClient;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class ApiClient {    public static MutableLiveData<Integer> mutableServerError = new MutableLiveData<>();    public static MutableLiveData<Integer> getMutableServerError() {        return mutableServerError;    }    public static Retrofit retrofit = null;    public static Retrofit retrofitGig = null;    public static Retrofit getClient() {        if (retrofit == null) {            Gson gson = new GsonBuilder()                    .setLenient()                    .create();//            HostnameVerifier hostnameVerifier = (hostname, session) -> {//                HostnameVerifier hv =//                        HttpsURLConnection.getDefaultHostnameVerifier();//                return hv.verify("agent.24task.com", session);//            };            HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();            interceptor.level(HttpLoggingInterceptor.Level.BODY);            OkHttpClient client;            client = new OkHttpClient.Builder()//                    .addInterceptor(new ChuckerInterceptor(Task24Application.getActivity()))                    .addInterceptor(interceptor)//                    .addInterceptor(chain -> {//                        Request request = chain.request();//                        Response response = chain.proceed(request);//                        try {//                            if (response.code() == 502) {//                                Task24Application.getActivity().getBaseActivity().runOnUiThread(() -> Toast.makeText(Task24Application.getActivity(), "Internal Server Error", Toast.LENGTH_SHORT).show());//                                getMutableServerError().postValue(response.code());////                                return response;//                            }//                        } catch (Exception e) {//                            e.printStackTrace();//                        }////                        return response;//                    })                    .connectTimeout(100, TimeUnit.SECONDS)                    .readTimeout(100, TimeUnit.SECONDS)                    .writeTimeout(100, TimeUnit.SECONDS)//                    .hostnameVerifier(hostnameVerifier)                    .build();            retrofit = new Retrofit.Builder()                    .baseUrl(BuildConfig.DEBUG ? "https://5afj78upnd.execute-api.me-central-1.amazonaws.com/backend/" : LIVE_URL)                    .addConverterFactory(GsonConverterFactory.create(gson))                    .client(client)                    .build();        }        return retrofit;    }    public static Retrofit getGigClient() {        if (retrofitGig == null) {            Gson gson = new GsonBuilder()                    .setLenient()                    .create();//            HostnameVerifier hostnameVerifier = (hostname, session) -> {//                HostnameVerifier hv =//                        HttpsURLConnection.getDefaultHostnameVerifier();//                return hv.verify("agent.24task.com", session);//            };            HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();            interceptor.level(HttpLoggingInterceptor.Level.BODY);            OkHttpClient client;            client = new OkHttpClient.Builder()//                    .addInterceptor(new ChuckerInterceptor(Task24Application.getActivity()))                    .addInterceptor(interceptor)//                    .addInterceptor(chain -> {//                        Request request = chain.request();//                        Response response = chain.proceed(request);//                        try {//                            if (response.code() == 502) {//                                Task24Application.getActivity().getBaseActivity().runOnUiThread(() -> Toast.makeText(Task24Application.getActivity(), "Internal Server Error", Toast.LENGTH_SHORT).show());//                                getMutableServerError().postValue(response.code());////                                return response;//                            }//                        } catch (Exception e) {//                            e.printStackTrace();//                        }////                        return response;//                    })                    .connectTimeout(100, TimeUnit.SECONDS)                    .readTimeout(100, TimeUnit.SECONDS)                    .writeTimeout(100, TimeUnit.SECONDS)//                    .hostnameVerifier(hostnameVerifier)                    .build();            retrofitGig = new Retrofit.Builder()                    .baseUrl(BuildConfig.DEBUG ? "https://knecq9c098.execute-api.me-central-1.amazonaws.com/backend/" : BASE_URL_GIG)                    .addConverterFactory(GsonConverterFactory.create(gson))                    .client(client)                    .build();        }        return retrofitGig;    }}